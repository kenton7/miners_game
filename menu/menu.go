package menu

import (
	"bufio"
	coal_package "coal_mine/coal"
	factory_pack "coal_mine/factory"
	miner "coal_mine/miners"
	baseminer "coal_mine/miners/base_miner"
	"context"
	"fmt"
	"os"
	"strconv"
	"strings"
)

func ShowMenu() {
	fmt.Println()
	fmt.Println("--- –ú–ï–ù–Æ --- ")
	fmt.Println("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ü–∏—Ñ—Ä—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–¥—ã:")
	fmt.Println("1 - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å")
	fmt.Println("2 - –ù–∞–Ω—è—Ç—å –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —à–∞—Ö—Ç—ë—Ä–∞ –∑–∞ 5 —É–≥–ª—è")
	fmt.Println("3 - –ù–∞–Ω—è—Ç—å —Å—Ä–µ–¥–Ω–µ–≥–æ —à–∞—Ö—Ç—ë—Ä–∞ –∑–∞ 50 —É–≥–ª—è")
	fmt.Println("4 - –ù–∞–Ω—è—Ç—å —Å–∏–ª—å–Ω–æ–≥–æ —à–∞—Ö—Ç—ë—Ä–∞ –∑–∞ 450 —É–≥–ª—è")
	fmt.Println("5 - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞—Ö—Ç—ë—Ä–∞—Ö")
	fmt.Println("6 - –ö—É–ø–∏—Ç—å –∫–∏—Ä–∫—É –Ω–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ –∑–∞ 3000 —É–≥–ª—è")
	fmt.Println("7 - –ö—É–ø–∏—Ç—å –≤–µ–Ω—Ç–∏–ª—è—Ü–∏—é –≤ —à–∞—Ö—Ç—É –∑–∞ 15000 —É–≥–ª—è")
	fmt.Println("8 - –ö—É–ø–∏—Ç—å –≤–∞–≥–æ–Ω–µ—Ç–∫–∏ –∑–∞ 50000 —É–≥–ª—è")
	fmt.Println("9 - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö —à–∞—Ö—Ç—ë—Ä–æ–≤")
	fmt.Println("10 - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é")
	fmt.Println("0 - –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã")
}

func ControlGame(command int, ctx context.Context, stopMiners func()) {

	//factoryCtx, factoryStop := context.WithCancel(context.Background())

	switch command {
	case 1:
		//TODO: - –°–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ API
		fmt.Printf("üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: %d\n", coal_package.GetCurrentBalance())

	case 2:
		workers := checkWorkers()
		miner.BuyAndStartMiner(baseminer.LittleMinerClass, workers, ctx)
	case 3:
		workers := checkWorkers()
		miner.BuyAndStartMiner(baseminer.NormalMinerClass, workers, ctx)
	case 4:
		workers := checkWorkers()
		miner.BuyAndStartMiner(baseminer.StrongMinerClass, workers, ctx)
	case 5:
		factory_pack.GetInfoAboutMiners()
	case 6:
		if err := factory_pack.BuyItem(factory_pack.Pickaxe); err != nil {
			fmt.Println(err.Error())
		}
		// if err := factory_pack.BuyItem(factory_pack.Pickaxe, factory_pack.PickaxeCost); err != nil {
		// 	fmt.Println(err.Error())
		// }
		// if err := factory_pack.BuyItem(factory_pack.NewItem("–ö–∏—Ä–∫–∞", 3000)); err != nil {
		// 	fmt.Println(err.Error())
		// }
	case 7:
		if err := factory_pack.BuyItem(factory_pack.Ventilation); err != nil {
			fmt.Println(err.Error())
		}
		// if err := factory_pack.BuyItem(factory_pack.Ventilation, factory_pack.VentilationCost); err != nil {
		// 	fmt.Println(err.Error())
		// }
	case 8:
		if err := factory_pack.BuyItem(factory_pack.Wagon); err != nil {
			fmt.Println(err.Error())
		}
		// if err := factory_pack.BuyItem(factory_pack.Wagon, factory_pack.WagonCost); err != nil {
		// 	fmt.Println(err.Error())
		// }
	case 9:
		fmt.Println("–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ —Ä–µ—à–∏–ª–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö —à–∞—Ö—Ç—ë—Ä–æ–≤...")
		stopMiners()
		return
	case 10:
		ShowMenu()
	case 0:
		fmt.Println("–í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã...")
		return
	default:
		fmt.Println("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
	}
}

// func ControlGame(ctx context.Context, stopMiners func()) {
// 	reader := bufio.NewReader(os.Stdin)

// 	for {
// 		fmt.Print("\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ")
// 		commandStr, _ := reader.ReadString('\n')
// 		commandStr = strings.TrimSpace(commandStr)
// 		command, err := strconv.Atoi(commandStr)
// 		if err != nil {
// 			fmt.Println("‚ùå –í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
// 			continue
// 		}

// 		switch command {
// 		case 1:
// 			//TODO: - –°–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ API
// 			fmt.Printf("üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: %d\n", coal_package.GetCurrentBalance())
// 		case 2:
// 			workers := checkWorkers()
// 			miner.BuyAndStartMiner(baseminer.LittleMinerClass, workers, ctx)
// 		case 3:
// 			workers := checkWorkers()
// 			miner.BuyAndStartMiner(baseminer.NormalMinerClass, workers, ctx)
// 		case 4:
// 			workers := checkWorkers()
// 			miner.BuyAndStartMiner(baseminer.StrongMinerClass, workers, ctx)
// 		case 5:
// 			factory_pack.GetInfoAboutMiners()
// 		case 6:
// 			if err := factory_pack.BuyItem(factory_pack.NewItem("–ö–∏—Ä–∫–∞", 3000)); err != nil {
// 				fmt.Println(err.Error())
// 			}
// 		case 7:
// 			if err := factory_pack.BuyItem(factory_pack.NewItem("–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è", 15000)); err != nil {
// 				fmt.Println(err.Error())
// 			}
// 		case 8:
// 			if err := factory_pack.BuyItem(factory_pack.NewItem("–í–∞–≥–æ–Ω–µ—Ç–∫–∞", 50000)); err != nil {
// 				fmt.Println(err.Error())
// 			}
// 		case 9:
// 			fmt.Println("–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ —Ä–µ—à–∏–ª–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö —à–∞—Ö—Ç—ë—Ä–æ–≤...")
// 			stopMiners()
// 			return
// 		case 10:
// 			showMenu()
// 		case 0:
// 			fmt.Println("–í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã...")
// 			return
// 		default:
// 			fmt.Println("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
// 		}
// 	}
// }

// func StartGame(ctx context.Context, stopMiners func()) {
// 	reader := bufio.NewReader(os.Stdin)

// 	for {
// 		fmt.Print("\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ")
// 		commandStr, _ := reader.ReadString('\n')
// 		commandStr = strings.TrimSpace(commandStr)
// 		command, err := strconv.Atoi(commandStr)
// 		if err != nil {
// 			fmt.Println("‚ùå –í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
// 			continue
// 		}

// 		switch command {
// 		case 1:
// 			fmt.Printf("üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: %d\n", coal_package.GetCurrentBalance())
// 		case 2:
// 			//miner.BuyMiner(baseminer.LittleMinerClass, ctx)
// 			//miner.BuyAndStartMiner(baseminer.LittleMinerClass, 2, ctx)
// 			//miner.BuyMiner(littleminer.New(), ctx)
// 		case 3:
// 			//miner.BuyMiner(normalminer.New(), ctx)
// 			miner.BuyMiner(baseminer.NormalMinerClass, ctx)
// 		case 4:
// 			//miner.BuyMiner(strongminer.New(), ctx)
// 			miner.BuyMiner(baseminer.StrongMinerClass, ctx)
// 		case 5:
// 			factory_pack.GetInfoAboutMiners()
// 		case 6:
// 			if err := factory_pack.BuyItem(factory_pack.NewItem("–ö–∏—Ä–∫–∞", 3000)); err != nil {
// 				fmt.Println(err.Error())
// 			}
// 		case 7:
// 			if err := factory_pack.BuyItem(factory_pack.NewItem("–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è", 15000)); err != nil {
// 				fmt.Println(err.Error())
// 			}
// 		case 8:
// 			if err := factory_pack.BuyItem(factory_pack.NewItem("–í–∞–≥–æ–Ω–µ—Ç–∫–∞", 50000)); err != nil {
// 				fmt.Println(err.Error())
// 			}
// 		case 9:
// 			fmt.Println("–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ —Ä–µ—à–∏–ª–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö —à–∞—Ö—Ç—ë—Ä–æ–≤...")
// 			stopMiners()
// 			return
// 		case 10:
// 			showMenu()
// 		case 0:
// 			fmt.Println("–í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã...")
// 			return
// 		default:
// 			fmt.Println("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
// 		}
// 	}
// }

func checkWorkers() int {
	reader := bufio.NewReader(os.Stdin)
	var workers int
	var err error
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞—Ö—Ç—ë—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏: ")

	for {
		workersStr, _ := reader.ReadString('\n')
		workersStr = strings.TrimSpace(workersStr)
		workers, err = strconv.Atoi(workersStr)
		if err != nil || workers <= 0 {
			fmt.Println("‚ùå –í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
			continue
		}
		break
	}
	return workers
}
